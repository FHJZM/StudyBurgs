import React from "react";
import { Diagram, IChartDataSource, IChartDataItem, LayoutStrategyBase, ConnectorAlignment } from "./core";
export interface SimpleRect {
    top: number;
    left: number;
    height: number;
    width: number;
}
export interface CSSRect {
    top: number;
    left: number;
    height: number | string;
    width: number | string;
}
export interface BoundaryRect extends SimpleRect {
    branchTop: number;
    branchLeft: number;
}
export declare enum DrawStage {
    MEASURE_HIDDEN = 0,
    MEASURE_VISIBLE = 1,
    RENDER = 2
}
export interface LineRenderContext<T> {
    rect: CSSRect;
    direction: "vertical" | "horizontal";
    assistant: boolean;
    data: T;
    dataId: string;
    boxId: number;
    index: number;
}
export interface NodeRenderContext<T> {
    rect: CSSRect;
    data: T;
    assistant: boolean;
    dataId: string;
    boxId: number;
    drawStage: DrawStage;
}
export interface NodeContainerRenderContext<T> {
    drawStage: DrawStage;
}
export interface NodeLineRenderContext<T> {
    drawStage: DrawStage;
    direction: LineRenderContext<T>["direction"];
}
export declare enum LayoutType {
    LINEAR = "linear",
    SMART = "smart",
    FISHBONE_1 = "fishbone1",
    FISHBONE_2 = "fishbone2",
    FISHBONE_3 = "fishbone3",
    FISHBONE_4 = "fishbone4",
    SINGLE_COLUMN_RIGHT = "singleColumnRight",
    SINGLE_COLUMN_LEFT = "singleColumnLeft",
    STACKERS = "stackers",
    ASSISTANTS = "assistants"
}
interface OrgChartDataItem<T> extends IChartDataItem {
    data: T;
    parentKey: string | null;
}
declare class OrgChartDiagram<T> extends Diagram {
    DataSource: IChartDataSource<OrgChartDataItem<T>>;
    constructor(dataSource: IChartDataSource<OrgChartDataItem<T>>);
}
export declare type NodeContainerRenderProps<T> = {
    "data-box-id": string;
    key: string;
    style: React.CSSProperties;
    children: React.ReactNode;
};
export declare type NodeLineRenderProps<T> = {
    "data-line-assistant": boolean;
    "data-line-direction": LineRenderContext<T>["direction"];
    className?: string;
    style: React.CSSProperties;
    key: string;
};
interface OrgChartProps<T> {
    root: T;
    keyGetter: (node: T) => string;
    childNodesGetter: (node: T) => T[];
    isAssistantGetter?: (node: T) => boolean;
    lineVerticalClassName?: string;
    lineHorizontalClassName?: string;
    lineVerticalStyle?: React.CSSProperties;
    lineHorizontalStyle?: React.CSSProperties;
    layout?: LayoutType | LayoutStrategyBase;
    assistantLayout?: LayoutType | LayoutStrategyBase;
    containerStyle?: React.CSSProperties;
    nodeContainerStyle?: React.CSSProperties;
    isValidNode: (id: string) => boolean;
    renderNode: (node: T) => React.ReactElement;
    renderNodeContainer?: (node: T, props: NodeContainerRenderProps<T>, context: NodeContainerRenderContext<T>) => React.ReactElement;
    renderNodeLine?: (node: T, props: NodeLineRenderProps<T>, context: NodeLineRenderContext<T>) => React.ReactElement;
    parentSpacing?: number;
    siblingSpacing?: number;
    connectorAlignment?: ConnectorAlignment;
    connectorThickness?: number;
    onRenderComplete?: (width: number, height: number) => void;
    measureTimeoutDelay?: number;
    measureStrategy?: "effect" | "timeout" | "idle" | "animation-frame" | "immediate";
    debug?: boolean;
}
interface OrgChartState<T> {
    lines: LineRenderContext<T>[];
    width: number;
    height: number;
    diagram: OrgChartDiagram<T> | null;
    nodes: NodeRenderContext<T>[];
    drawStage: DrawStage;
    boundaries: BoundaryRect[];
    prevProps: OrgChartProps<T> | null;
    renderIndex: number;
}
export default class OrgChart<T> extends React.Component<OrgChartProps<T>, OrgChartState<T>> {
    state: OrgChartState<T>;
    private _mounted;
    private _container;
    private static assignStrategies;
    private static getDataSource;
    private static getBranchOptimizerStackers;
    private static getBranchOptimizerSmart;
    componentWillUnmount(): void;
    static getDerivedStateFromProps<T>(props: OrgChartProps<T>, state: OrgChartState<T>): Partial<OrgChartState<T>>;
    componentWillMount(): void;
    componentWillReceiveProps(nextProps: OrgChartProps<T>): void;
    private static createDiagram;
    private onComputeBranchOptimizer;
    private static getPlaceholders;
    private _tid;
    private _lastRenderIndex;
    private safelyDrawDiagram;
    componentDidMount: () => void;
    private drawDiagram;
    render(): JSX.Element;
}
export {};
