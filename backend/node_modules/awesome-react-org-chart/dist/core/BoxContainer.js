"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Box_1 = __importDefault(require("./Box"));
var BoxContainer = /** @class */ (function () {
    function BoxContainer(source) {
        this._lastBoxId = 0;
        this._boxesById = new Map();
        this._boxesByDataId = new Map();
        this.SystemRoot = null;
        if (source) {
            this.ReloadBoxes(source);
        }
    }
    Object.defineProperty(BoxContainer.prototype, "BoxesById", {
        get: function () {
            return this._boxesById;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BoxContainer.prototype, "BoxesByDataId", {
        get: function () {
            return this._boxesByDataId;
        },
        enumerable: false,
        configurable: true
    });
    BoxContainer.prototype.ReloadBoxes = function (source) {
        var e_1, _a, e_2, _b;
        this._boxesByDataId.clear();
        this._boxesById.clear();
        this._lastBoxId = 0;
        // generate system root box
        this.SystemRoot = Box_1.default.Special(++this._lastBoxId, Box_1.default.None, true);
        this._boxesById.set(this.SystemRoot.Id, this.SystemRoot);
        var map = new Map();
        try {
            // generate identifiers mapping, need this because data comes in random order
            for (var _c = __values(source.AllDataItemIds), _d = _c.next(); !_d.done; _d = _c.next()) {
                var dataId = _d.value;
                map.set(dataId, this.NextBoxId());
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // add data-bound boxes
        var getDataItem = source.GetDataItemFunc;
        try {
            for (var _e = __values(source.AllDataItemIds), _f = _e.next(); !_f.done; _f = _e.next()) {
                var dataId = _f.value;
                var parentDataId = !dataId ? null : source.GetParentKeyFunc(dataId);
                var visualParentId = !parentDataId
                    ? this.SystemRoot.Id
                    : map.get(parentDataId);
                var nextBoxId = map.get(dataId);
                if (nextBoxId != null && visualParentId != null) {
                    this._AddBox(dataId, nextBoxId, visualParentId, getDataItem(dataId).IsAssistant);
                }
                else {
                    // throw Error("_AddBox null");
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    /// <summary>
    /// Creates a new <see cref="Box"/> and adds it to collection.
    /// </summary>
    /// <returns>Newly created Node object</returns>
    BoxContainer.prototype.AddBox = function (dataId, visualParentId, isAssistant) {
        return this._AddBox(dataId, this.NextBoxId(), visualParentId, isAssistant);
    };
    BoxContainer.prototype._AddBox = function (dataId, id, visualParentId, isAssistant) {
        var box = new Box_1.default(dataId, id, visualParentId, false, false, isAssistant);
        this._boxesById.set(box.Id, box);
        if (box.DataId) {
            this._boxesByDataId.set(box.DataId, box);
        }
        return box;
    };
    BoxContainer.prototype.NextBoxId = function () {
        this._lastBoxId++;
        return this._lastBoxId;
    };
    return BoxContainer;
}());
exports.default = BoxContainer;
