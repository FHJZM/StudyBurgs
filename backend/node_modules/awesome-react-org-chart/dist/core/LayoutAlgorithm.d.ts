import Rect from "./Rect";
import BoxTree from "./BoxTree";
import Node from "./Node";
import LayoutState from "./LayoutState";
import LayoutLevel from "./LayoutLevel";
import Dimensions from "./Dimensions";
import NodeLayoutInfo from "./NodeLayoutInfo";
export default class LayoutAlgorithm {
    static ComputeBranchVisualBoundingRect(visualTree: BoxTree): Rect;
    static Apply(state: LayoutState): void;
    private static AssertBoxSize;
    private static PreprocessVisualTree;
    static HorizontalLayout(state: LayoutState, branchRoot: Node): void;
    static VerticalLayout(state: LayoutState, branchRoot: Node): void;
    private static RouteConnectors;
    static MoveChildrenOnly(state: LayoutState, layoutLevel: LayoutLevel, offset: number): void;
    private static MoveOneChild;
    static MoveBranch(state: LayoutState, layoutLevel: LayoutLevel, offset: number): void;
    static AlignHorizontalCenters(state: LayoutState, level: LayoutLevel, subset: Node[]): Dimensions;
    static CopyExteriorFrom(state: NodeLayoutInfo, other: NodeLayoutInfo): void;
    static IsMinValue(value: number): boolean;
    static IsMaxValue(value: number): boolean;
    static IsZero(value: number): boolean;
    static IsEqual(value: number, other: number): boolean;
    static MoveTo(state: NodeLayoutInfo, x: number, y: number): void;
    static AdjustSpacer(state: NodeLayoutInfo, x: number, y: number, w: number, h: number): void;
}
