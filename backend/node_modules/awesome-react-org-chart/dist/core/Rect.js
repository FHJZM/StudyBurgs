"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Point_1 = __importDefault(require("./Point"));
var Size_1 = __importDefault(require("./Size"));
var Rect = /** @class */ (function () {
    function Rect(x, y, w, h) {
        if (w < 0) {
            throw new Error("Width out of range");
        }
        if (h < 0) {
            throw new Error("Height out of range");
        }
        this.TopLeft = new Point_1.default(x, y);
        this.Size = new Size_1.default(w, h);
    }
    Object.defineProperty(Rect.prototype, "BottomRight", {
        get: function () {
            return new Point_1.default(this.TopLeft.X + this.Size.Width, this.TopLeft.Y + this.Size.Height);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "Left", {
        get: function () {
            return this.TopLeft.X;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "Right", {
        get: function () {
            return this.TopLeft.X + this.Size.Width;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "CenterH", {
        get: function () {
            return this.TopLeft.X + this.Size.Width / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "CenterV", {
        get: function () {
            return this.TopLeft.Y + this.Size.Height / 2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "Top", {
        get: function () {
            return this.TopLeft.Y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Rect.prototype, "Bottom", {
        get: function () {
            return this.TopLeft.Y + this.Size.Height;
        },
        enumerable: false,
        configurable: true
    });
    Rect.from = function (size, topLeft) {
        if (topLeft === void 0) { topLeft = new Point_1.default(0, 0); }
        return new Rect(topLeft.X, topLeft.Y, size.Width, size.Height);
    };
    Rect.add = function (x, y) {
        var left = Math.min(x.Left, y.Left);
        var top = Math.min(x.Top, y.Top);
        var right = Math.max(x.Right, y.Right);
        var bottom = Math.max(x.Bottom, y.Bottom);
        return new Rect(left, top, right - left, bottom - top);
    };
    Rect.prototype.MoveH = function (offsetX) {
        return Rect.from(this.Size, new Point_1.default(this.Left + offsetX, this.Top));
    };
    return Rect;
}());
exports.default = Rect;
