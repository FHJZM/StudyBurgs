"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Box_1 = __importDefault(require("./Box"));
var NodeLayoutInfo_1 = __importDefault(require("./NodeLayoutInfo"));
var Node = /** @class */ (function () {
    function Node(element) {
        this.Level = 0;
        this.Children = [];
        this.AssistantsRoot = null;
        this.ParentNode = null;
        this.Element = element;
        this.State = new NodeLayoutInfo_1.default();
    }
    Object.defineProperty(Node.prototype, "ChildCount", {
        get: function () {
            var _a;
            return ((_a = this.Children) === null || _a === void 0 ? void 0 : _a.length) || 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Node.prototype, "IsAssistantRoot", {
        get: function () {
            var _a;
            return ((_a = this.ParentNode) === null || _a === void 0 ? void 0 : _a.AssistantsRoot) == this;
        },
        enumerable: false,
        configurable: true
    });
    Node.prototype.AddAssistantChild = function (child) {
        if (this.AssistantsRoot == null) {
            this.AssistantsRoot = new Node(Box_1.default.Special(Box_1.default.None, this.Element.Id, true));
            this.AssistantsRoot.ParentNode = this;
            this.AssistantsRoot.Level = this.AssistantsRoot.Level + 1;
        }
        this.AssistantsRoot.AddRegularChild(child);
        return this;
    };
    /// <summary>
    /// Adds a new child to the list. Returns reference to self.
    /// </summary>
    Node.prototype.AddRegularChild = function (child) {
        return this.InsertRegularChild(this.ChildCount, child);
    };
    Node.prototype.AddRegularChildBox = function (child) {
        return this.InsertRegularChildBoxByIndex(this.ChildCount, child);
    };
    /// <summary>
    /// Adds a new child to the list. Returns reference to self.
    /// </summary>
    Node.prototype.InsertRegularChildBox = function (child) {
        return this.InsertRegularChildBoxByIndex(this.ChildCount, child);
    };
    /// <summary>
    /// Adds a new child to the list. Returns reference to self.
    /// </summary>
    Node.prototype.InsertRegularChildBoxByIndex = function (index, child) {
        return this.InsertRegularChild(index, new Node(child));
    };
    /// <summary>
    /// Adds a new child to the list. Returns reference to self.
    /// </summary>
    Node.prototype.InsertRegularChild = function (index, child) {
        if (this.Children == null) {
            this.Children = [];
        }
        this.Children.splice(index, 0, child);
        child.ParentNode = this;
        child.Level = this.Level + 1;
        // if (child.Element.Id === -1) {
        //   debugger;
        // }
        return this;
    };
    Node.prototype.IterateChildFirst = function (func) {
        var e_1, _a;
        if (this.AssistantsRoot != null) {
            if (!this.AssistantsRoot.IterateChildFirst(func)) {
                return false;
            }
        }
        if (this.Children != null) {
            try {
                for (var _b = __values(this.Children), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var child = _c.value;
                    if (!child.IterateChildFirst(func)) {
                        return false;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return func(this);
    };
    /// <summary>
    /// Goes through all elements depth-first. Applies <paramref name="enter"/> to the parent first, then to all children recursively.
    /// In this mode, children at each level decide for themselves whether they want to iterate further down,
    /// e.g. <paramref name="enter"/> can cut-off a branch.
    /// </summary>
    /// <param name="enter">A predicate to allow iteration of branch under this node</param>
    /// <param name="exit">An optional action to run afer iteration of some branch is complete</param>
    Node.prototype.IterateParentFirst = function (enter, exit) {
        var e_2, _a;
        var _b;
        if (!enter(this)) {
            if (exit) {
                exit(this);
            }
            return false;
        }
        (_b = this.AssistantsRoot) === null || _b === void 0 ? void 0 : _b.IterateParentFirst(enter, exit);
        if (this.Children != null) {
            try {
                for (var _c = __values(this.Children), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var child = _d.value;
                    // Ignore returned value, in this mode children at each level
                    // decide for themselves whether they want to iterate further down.
                    child.IterateParentFirst(enter, exit);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (exit) {
            exit(this);
        }
        return true;
    };
    Node.prototype.SuppressAssistants = function () {
        var e_3, _a;
        if (this.AssistantsRoot != null) {
            try {
                for (var _b = __values(this.AssistantsRoot.Children), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var child = _c.value;
                    this.AddRegularChild(child);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
            this.AssistantsRoot = null;
        }
    };
    return Node;
}());
exports.default = Node;
