"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Box_1 = __importDefault(require("./Box"));
var Node_1 = __importDefault(require("./Node"));
var BoxTree = /** @class */ (function () {
    function BoxTree() {
        this.Depth = 0;
        this.Root = null;
        this.Nodes = new Map();
    }
    BoxTree.prototype.IterateChildFirst = function (func) {
        if (this.Root == null) {
            throw Error("Root is null");
        }
        return this.Root.IterateChildFirst(func);
    };
    BoxTree.prototype.IterateParentFirst = function (enter, exit) {
        if (this.Root == null) {
            throw Error("Root is null");
        }
        this.Root.IterateParentFirst(enter, exit);
    };
    BoxTree.prototype.UpdateHierarchyStats = function () {
        var _this = this;
        this.Depth = 0;
        this.IterateParentFirst(function (x) {
            if (x.ParentNode != null) {
                x.Level = x.ParentNode.Level;
                if (!x.ParentNode.IsAssistantRoot) {
                    x.Level = x.Level + 1;
                }
                _this.Depth = Math.max(1 + x.Level, _this.Depth);
            }
            else {
                x.Level = 0;
                _this.Depth = 1;
            }
            return true;
        });
    };
    BoxTree.Build = function (state) {
        var e_1, _a, e_2, _b;
        var result = new BoxTree();
        // TODO convert to const
        var box;
        try {
            for (var _c = __values(state.Diagram.Boxes.BoxesById.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                box = _d.value;
                var node = new Node_1.default(box);
                result.Nodes.set(box.Id, node);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            // build the tree
            for (var _e = __values(result.Nodes.values()), _f = _e.next(); !_f.done; _f = _e.next()) {
                var node = _f.value;
                var parentKey = node.Element.ParentId;
                var parentNode = result.Nodes.get(parentKey);
                if (parentNode) {
                    if (node.Element.IsAssistant &&
                        parentNode.Element.ParentId != Box_1.default.None) {
                        parentNode.AddAssistantChild(node);
                    }
                    else {
                        parentNode.AddRegularChild(node);
                    }
                }
                else {
                    if (result.Root != null) {
                        throw new Error("InvalidOperationException: More then one root found: " +
                            node.Element.Id);
                    }
                    result.Root = node;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return result;
    };
    return BoxTree;
}());
exports.default = BoxTree;
